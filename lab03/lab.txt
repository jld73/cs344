3.1.a
    Depth first search does not work, the problem is just too big to fit within time/space constraints necessary.
    AC3 handles the easy puzzle, but fails on all of the complicated ones.
    Backtracking handles the first one too, but the rest are too complicated to finish in time, as the number of backtracks necessary grows.
    Min conflicts also fails on all accounts, the problem space is simply too large for it to be effective.
b
    By setting the inference to forward-checking, backtracking is able to easily solve the most complicated puzzle, and by adding in mrv, it goes even faster.
    The best option for sudoku was by far backtracking search with both mrv and forward-checking activated.

3.2.a
    AC3 can't even handle n=4, as it is not built for this type of problem
    Backtracking without forward checking/mrv is able to handle values of n up to about 25+, before it gets too long
    Min conflicts appears to be able to handle pretty much arbitrarily difficult problems; even at 2000+ it took only a few seconds to run.
b
    By adding in forward checking and mrv, backtracking search is able to run up to values of about 100 before showing any sign of slowdown, which is better than either setting on its own, and much better than the baseline. This is because it no longer has to check many parts of the search space that wont lead to a solution.
c
    It seems to take anywhere form 20-80 steps in most cases, though the actual number varies greatly.

3.3.a
    CSP requires a set of variables each of which can be assigned a value from its domain. There are then a set of constraints that limit which values of the domain are valid, and a functions to assign new values.
    Traditional Search and CSP both requires a State, a set of actions which can transform the a valid state into another valid state, a Result function to apply a given action and produce the new state, and a goal test, to see if the process has completed.
    Thus, CSP is like an extension of a traditional search that can be done where there are specific constraints that can be applied to the variables.
b
    The heuristics used in both types of algorithms are designed to prioritize checking paths which are most likely to lead to a solution.
    The heuristics differ in that traditional search heuristics are often based on the "value" of a particular state, while CSP focuses on the number of constraints that are/aren't met.
